diff -rcP -X ignorelist.txt linux-3.10.10/include/linux/sched.h project2/include/linux/sched.h
*** linux-3.10.10/include/linux/sched.h	2013-08-29 12:47:51.000000000 -0400
--- project2/include/linux/sched.h	2013-12-09 19:43:27.779833293 -0500
***************
*** 1010,1015 ****
--- 1010,1018 ----
  	unsigned long timeout;
  	unsigned long watchdog_stamp;
  	unsigned int time_slice;
+ 	u64 tau;
+ 	u64 burst_time;
+ 	unsigned int times_execd;
  
  	struct sched_rt_entity *back;
  #ifdef CONFIG_RT_GROUP_SCHED
diff -rcP -X ignorelist.txt linux-3.10.10/init/main.c project2/init/main.c
*** linux-3.10.10/init/main.c	2013-08-29 12:47:51.000000000 -0400
--- project2/init/main.c	2013-12-02 16:12:36.707570560 -0500
***************
*** 87,92 ****
--- 87,95 ----
  
  static int kernel_init(void *);
  
+ /* [421] initialize psjf variables */
+ extern void init_psjf_vars(void);
+ 
  extern void init_IRQ(void);
  extern void fork_init(unsigned long);
  extern void mca_init(void);
***************
*** 473,478 ****
--- 476,484 ----
  	char * command_line;
  	extern const struct kernel_param __start___param[], __stop___param[];
  
+ 	/* [421] calls here */
+ 	init_psjf_vars();
+ 
  	/*
  	 * Need to run as early as possible, to initialize the
  	 * lockdep hash:
diff -rcP -X ignorelist.txt linux-3.10.10/kernel/sched/Makefile project2/kernel/sched/Makefile
*** linux-3.10.10/kernel/sched/Makefile	2013-08-29 12:47:51.000000000 -0400
--- project2/kernel/sched/Makefile	2013-11-30 17:30:51.769693047 -0500
***************
*** 11,17 ****
  CFLAGS_core.o := $(PROFILING) -fno-omit-frame-pointer
  endif
  
! obj-y += core.o clock.o cputime.o idle_task.o fair.o rt.o stop_task.o
  obj-$(CONFIG_SMP) += cpupri.o
  obj-$(CONFIG_SCHED_AUTOGROUP) += auto_group.o
  obj-$(CONFIG_SCHEDSTATS) += stats.o
--- 11,17 ----
  CFLAGS_core.o := $(PROFILING) -fno-omit-frame-pointer
  endif
  
! obj-y += core.o clock.o cputime.o idle_task.o fair.o rt421.o stop_task.o
  obj-$(CONFIG_SMP) += cpupri.o
  obj-$(CONFIG_SCHED_AUTOGROUP) += auto_group.o
  obj-$(CONFIG_SCHEDSTATS) += stats.o
diff -rcP -X ignorelist.txt linux-3.10.10/kernel/sched/rt421.c project2/kernel/sched/rt421.c
*** linux-3.10.10/kernel/sched/rt421.c	1969-12-31 19:00:00.000000000 -0500
--- project2/kernel/sched/rt421.c	2013-12-09 21:15:43.784181542 -0500
***************
*** 0 ****
--- 1,819 ----
+ /*
+  * Real-Time Scheduling Class (mapped to the SCHED_FIFO and SCHED_RR
+  * policies)
+  */
+ 
+ #include "sched.h"
+ 
+ #include <linux/slab.h>
+ 
+ /* [421] include to initialize systemwide variable for tau */
+ #include <linux/init.h>
+ 
+ int sched_rr_timeslice = RR_TIMESLICE;
+ 
+ static int do_sched_rt_period_timer(struct rt_bandwidth *rt_b, int overrun);
+ 
+ struct rt_bandwidth def_rt_bandwidth;
+ 
+ /* [421] global variables for initial tau and alpha */
+ #define MAX_ALPHA 256
+ #define ALPHA      64
+ 
+ u64 tau;
+ void __init init_psjf_vars(void) {
+ 	tau = 65536;
+ }
+ 
+ 
+ /*
+  * Installed as callback for period timer by init_rt_bandwidth()
+  *   --jyp
+  */
+ static enum hrtimer_restart sched_rt_period_timer(struct hrtimer *timer)
+ {
+ 	struct rt_bandwidth *rt_b =
+ 		container_of(timer, struct rt_bandwidth, rt_period_timer);
+ 	ktime_t now;
+ 	int overrun;
+ 	int idle = 0;
+ 
+ 	for (;;) {
+ 		now = hrtimer_cb_get_time(timer);
+ 		overrun = hrtimer_forward(timer, now, rt_b->rt_period);
+ 
+ 		if (!overrun)
+ 			break;
+ 
+ 		idle = do_sched_rt_period_timer(rt_b, overrun);
+ 	}
+ 
+ 	return idle ? HRTIMER_NORESTART : HRTIMER_RESTART;
+ }
+ 
+ /*
+  * Called from core.c:sched_init(), with &def_rt_bandwidth  --jyp
+  */
+ void init_rt_bandwidth(struct rt_bandwidth *rt_b, u64 period, u64 runtime)
+ {
+ 	rt_b->rt_period = ns_to_ktime(period);
+ 	rt_b->rt_runtime = runtime;
+ 
+ 	raw_spin_lock_init(&rt_b->rt_runtime_lock);
+ 
+ 	hrtimer_init(&rt_b->rt_period_timer,
+ 			CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+ 	rt_b->rt_period_timer.function = sched_rt_period_timer;
+ }
+ 
+ /*
+  * Called by inc_rt_group() w/arg &def_rt_bandwidth
+  * (that's *all* it does, if cgroups not active)  --jyp
+  */
+ static void start_rt_bandwidth(struct rt_bandwidth *rt_b)
+ {
+ 	if (!rt_bandwidth_enabled() || rt_b->rt_runtime == RUNTIME_INF)
+ 		return;
+ 
+ 	if (hrtimer_active(&rt_b->rt_period_timer))
+ 		return;
+ 
+ 	raw_spin_lock(&rt_b->rt_runtime_lock);
+ 	start_bandwidth_timer(&rt_b->rt_period_timer, rt_b->rt_period);
+ 	raw_spin_unlock(&rt_b->rt_runtime_lock);
+ }
+ 
+ /*
+  * Called from core.c:sched_init() for each CPU, w/args
+  * &rq->rt, rq (where rq = cpu_rq(i))
+  * sched_init() also initializes rq->rt.rt_runtime to default  --jyp
+  */
+ void init_rt_rq(struct rt_rq *rt_rq, struct rq *rq)
+ {
+ 	struct rt_prio_array *array;
+ 	int i;
+ 
+ 	array = &rt_rq->active;
+ 	for (i = 0; i < MAX_RT_PRIO; i++) {
+ 		INIT_LIST_HEAD(array->queue + i);
+ 		__clear_bit(i, array->bitmap);
+ 	}
+ 	/* delimiter for bitsearch: */
+ 	__set_bit(MAX_RT_PRIO, array->bitmap);
+ 
+ 	rt_rq->rt_time = 0;
+ 	rt_rq->rt_throttled = 0;
+ 	rt_rq->rt_runtime = 0;
+ 	raw_spin_lock_init(&rt_rq->rt_runtime_lock);
+ }
+ 
+ static inline int on_rt_rq(struct sched_rt_entity *rt_se)
+ {
+ 	return !list_empty(&rt_se->run_list);
+ }
+ 
+ #include "rt-supp.h"
+ 
+ /*
+  * Actual worker func for sched_rt_period_timer()  --jyp
+  */
+ static int do_sched_rt_period_timer(struct rt_bandwidth *rt_b, int overrun)
+ {
+ 	int i, idle = 1, throttled = 0;
+ 	const struct cpumask *span;
+ 
+ 	span = sched_rt_period_mask();
+ 	for_each_cpu(i, span) {
+ 		int enqueue = 0;
+ 		struct rt_rq *rt_rq = sched_rt_period_rt_rq(rt_b, i);
+ 		struct rq *rq = rq_of_rt_rq(rt_rq);
+ 
+ 		raw_spin_lock(&rq->lock);
+ 		if (rt_rq->rt_time) {
+ 			u64 runtime;
+ 
+ 			raw_spin_lock(&rt_rq->rt_runtime_lock);
+ 			if (rt_rq->rt_throttled)
+ 				balance_runtime(rt_rq);
+ 			runtime = rt_rq->rt_runtime;
+ 			rt_rq->rt_time -= min(rt_rq->rt_time, overrun*runtime);
+ 			if (rt_rq->rt_throttled && rt_rq->rt_time < runtime) {
+ 				rt_rq->rt_throttled = 0;
+ 				enqueue = 1;
+ 
+ 				/*
+ 				 * Force a clock update if the CPU was idle,
+ 				 * lest wakeup -> unthrottle time accumulate.
+ 				 */
+ 				if (rt_rq->rt_nr_running && rq->curr == rq->idle)
+ 					rq->skip_clock_update = -1;
+ 			}
+ 			if (rt_rq->rt_time || rt_rq->rt_nr_running)
+ 				idle = 0;
+ 			raw_spin_unlock(&rt_rq->rt_runtime_lock);
+ 		} else if (rt_rq->rt_nr_running) {
+ 			idle = 0;
+ 			if (!rt_rq_throttled(rt_rq))
+ 				enqueue = 1;
+ 		}
+ 		if (rt_rq->rt_throttled)
+ 			throttled = 1;
+ 
+ 		if (enqueue)
+ 			sched_rt_rq_enqueue(rt_rq);
+ 		raw_spin_unlock(&rq->lock);
+ 	}
+ 
+ 	if (!throttled && (!rt_bandwidth_enabled() || rt_b->rt_runtime == RUNTIME_INF))
+ 		return 1;
+ 
+ 	return idle;
+ }
+ 
+ /*
+  * Called from update_curr_rt(), which then triggers resched_task()
+  * if we return true  --jyp
+  */
+ 
+ static int sched_rt_runtime_exceeded(struct rt_rq *rt_rq)
+ {
+ 	u64 runtime = sched_rt_runtime(rt_rq);
+ 
+ 	if (rt_rq->rt_throttled)
+ 		return rt_rq_throttled(rt_rq);
+ 
+ 	if (runtime >= sched_rt_period(rt_rq))
+ 		return 0;
+ 
+ 	balance_runtime(rt_rq);
+ 	runtime = sched_rt_runtime(rt_rq);
+ 	if (runtime == RUNTIME_INF)
+ 		return 0;
+ 
+ 	if (rt_rq->rt_time > runtime) {
+ 		struct rt_bandwidth *rt_b = sched_rt_bandwidth(rt_rq);
+ 
+ 		/*
+ 		 * Don't actually throttle groups that have no runtime assigned
+ 		 * but accrue some time due to boosting.
+ 		 */
+ 		if (likely(rt_b->rt_runtime)) {
+ 			static bool once = false;
+ 
+ 			rt_rq->rt_throttled = 1;
+ 
+ 			if (!once) {
+ 				once = true;
+ 				printk_sched("sched: RT throttling activated\n");
+ 			}
+ 		} else {
+ 			/*
+ 			 * In case we did anyway, make it go away,
+ 			 * replenishment is a joke, since it will replenish us
+ 			 * with exactly 0 ns.
+ 			 */
+ 			rt_rq->rt_time = 0;
+ 		}
+ 
+ 		if (rt_rq_throttled(rt_rq)) {
+ 			sched_rt_rq_dequeue(rt_rq);
+ 			return 1;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ /*
+  * Update the current task's runtime statistics. Skip current tasks that
+  * are not in our scheduling class.
+  */
+ static void update_curr_rt(struct rq *rq)
+ {
+ 	struct task_struct *curr = rq->curr;
+ 	struct sched_rt_entity *rt_se = &curr->rt;
+ 	struct rt_rq *rt_rq = rt_rq_of_se(rt_se);
+ 	u64 delta_exec;
+ 
+ 	if (curr->sched_class != &rt_sched_class)
+ 		return;
+ 
+ 	printk("-- in update_curr --\n");
+ 
+ 	delta_exec = rq->clock_task - curr->se.exec_start;
+ 	printk("delta_exec = %llu\n", delta_exec);	
+ 
+ 	/* increment execution counter */
+ 	rt_se->times_execd++;
+ 
+ 	/* divide total runtime by exec counter to get burst_time */
+ 	u64 temp = curr->se.sum_exec_runtime;
+ 	printk("sum_exec_runtime = %llu\n", temp);
+ 	do_div(temp, rt_se->times_execd);
+ 
+ 	/* set avg burst_time of curent task */
+ 	rt_se->burst_time = temp;
+ 	printk("temp = %llu\n", temp);
+ 	printk("burst_time = %llu\n", rt_se->burst_time);
+ 	
+ 	printk("-- end enqueue --\n");
+ 
+ 	if (unlikely((s64)delta_exec <= 0))
+ 		return;
+ 
+ 	schedstat_set(curr->se.statistics.exec_max,
+ 		      max(curr->se.statistics.exec_max, delta_exec));
+ 
+ 	curr->se.sum_exec_runtime += delta_exec;
+ 	account_group_exec_runtime(curr, delta_exec);
+ 
+ 	curr->se.exec_start = rq->clock_task;
+ 	cpuacct_charge(curr, delta_exec);
+ 
+ 	sched_rt_avg_update(rq, delta_exec);
+ 
+ 	if (!rt_bandwidth_enabled())
+ 		return;
+ 
+ 	for_each_sched_rt_entity(rt_se) {
+ 		rt_rq = rt_rq_of_se(rt_se);
+ 
+ 		if (sched_rt_runtime(rt_rq) != RUNTIME_INF) {
+ 			raw_spin_lock(&rt_rq->rt_runtime_lock);
+ 			rt_rq->rt_time += delta_exec;
+ 
+ 			if (sched_rt_runtime_exceeded(rt_rq))
+ 				resched_task(curr);
+ 			raw_spin_unlock(&rt_rq->rt_runtime_lock);
+ 		}
+ 	}
+ }
+ 
+ /*
+  * Called at very end of __enqueue_rt_entity()  --jyp
+  */
+ static inline
+ void inc_rt_tasks(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)
+ {
+ 	int prio = rt_se_prio(rt_se);
+ 
+ 	WARN_ON(!rt_prio(prio));
+ 	rt_rq->rt_nr_running++;
+ 
+ 	inc_rt_prio(rt_rq, prio);
+ 	inc_rt_migration(rt_se, rt_rq);
+ 	inc_rt_group(rt_se, rt_rq);
+ }
+ 
+ /*
+  * Called at very end of __dequeue_rt_entity()  --jyp
+  */
+ static inline
+ void dec_rt_tasks(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)
+ {
+ 	WARN_ON(!rt_prio(rt_se_prio(rt_se)));
+ 	WARN_ON(!rt_rq->rt_nr_running);
+ 	rt_rq->rt_nr_running--;
+ 
+ 	dec_rt_prio(rt_rq, rt_se_prio(rt_se));
+ 	dec_rt_migration(rt_se, rt_rq);
+ 	dec_rt_group(rt_se, rt_rq);
+ }
+ 
+ /*
+  * Main worker func for enqueue_rt_entity()  --jyp
+  */
+ static void __enqueue_rt_entity(struct sched_rt_entity *rt_se, bool head)
+ {
+ 	struct rt_rq *rt_rq = rt_rq_of_se(rt_se);
+ 	struct rt_prio_array *array = &rt_rq->active;
+ 	struct rt_rq *group_rq = group_rt_rq(rt_se);
+ 	struct list_head *queue = array->queue + rt_se_prio(rt_se);
+ 	
+ 	printk("-- start enqueue --\n");
+ 
+         /* set tau of current entity */
+         rt_se->tau = tau;
+         printk("enqueueing task 0x%x with tau = %llu\n", rt_se, rt_se->tau);
+ 
+         /* update tau for next entity */
+ 	printk("runtime of current entity = %llu\n", rt_se->burst_time);        
+ 	printk("times_execd of curr entitiy = %llu\n", rt_se->times_execd);
+ 
+ 	tau = (ALPHA * rt_se->burst_time + (MAX_ALPHA - ALPHA) * tau) / MAX_ALPHA;
+ 	printk("new tau for next = %llu\n", tau);
+ 
+ 	/*
+ 	 * Don't enqueue the group if its throttled, or when empty.
+ 	 * The latter is a consequence of the former when a child group
+ 	 * get throttled and the current group doesn't have any other
+ 	 * active members.
+ 	 */
+ 	if (group_rq && (rt_rq_throttled(group_rq) || !group_rq->rt_nr_running))
+ 		return;
+ 
+ 	if (!rt_rq->rt_nr_running)
+ 		list_add_leaf_rt_rq(rt_rq);
+ 	
+ 	if (head) {
+ 		printk("attaching at head\n");
+ 		list_add(&rt_se->run_list, queue);
+ 	}
+ 	else {
+ 		printk("attaching not at head\n");
+         	struct list_head *temp;
+         	struct list_head *item;
+ 		printk("list empty: %d\n", list_empty(queue));
+        		list_for_each_safe(item, temp, queue) {
+ 			u64 t_tau = list_entry(item, struct sched_rt_entity, run_list)->tau;
+                		printk("t_tau of list_entry: %llu\n", t_tau);
+ 			if(t_tau >= rt_se->tau)
+ 				break;
+ 			else;
+         	}
+ 
+ 		if(item == NULL)
+ 			list_add_tail(&rt_se->run_list, queue);
+ 		else
+         		list_add(&rt_se->run_list, item);
+ 	}
+ 
+ 	printk("-- end enqueue --\n");
+ 
+ 	__set_bit(rt_se_prio(rt_se), array->bitmap);
+ 
+ 	inc_rt_tasks(rt_se, rt_rq);
+ }
+ 
+ /*
+  * Main worker func for dequeue_rt_entity()  --jyp
+  */
+ static void __dequeue_rt_entity(struct sched_rt_entity *rt_se)
+ {
+ 	struct rt_rq *rt_rq = rt_rq_of_se(rt_se);
+ 	struct rt_prio_array *array = &rt_rq->active;
+ 
+ 	list_del_init(&rt_se->run_list);
+ 	if (list_empty(array->queue + rt_se_prio(rt_se)))
+ 		__clear_bit(rt_se_prio(rt_se), array->bitmap);
+ 
+ 	dec_rt_tasks(rt_se, rt_rq);
+ 	if (!rt_rq->rt_nr_running)
+ 		list_del_leaf_rt_rq(rt_rq);
+ }
+ 
+ /*
+  * Because the prio of an upper entry depends on the lower
+  * entries, we must remove entries top - down.
+  */
+ static void dequeue_rt_stack(struct sched_rt_entity *rt_se)
+ {
+ 	struct sched_rt_entity *back = NULL;
+ 
+ 	for_each_sched_rt_entity(rt_se) {
+ 		rt_se->back = back;
+ 		back = rt_se;
+ 	}
+ 
+ 	for (rt_se = back; rt_se; rt_se = rt_se->back) {
+ 		if (on_rt_rq(rt_se))
+ 			__dequeue_rt_entity(rt_se);
+ 	}
+ }
+ 
+ /*
+  * Main worker func for SCE enqueue_task_rt()  --jyp
+  */
+ static void enqueue_rt_entity(struct sched_rt_entity *rt_se, bool head)
+ {
+ 	dequeue_rt_stack(rt_se);
+ 	for_each_sched_rt_entity(rt_se)
+ 		__enqueue_rt_entity(rt_se, head);
+ }
+ 
+ /*
+  * Main worker func for SCE dequeue_task_rt()  --jyp
+  */
+ static void dequeue_rt_entity(struct sched_rt_entity *rt_se)
+ {
+ 	dequeue_rt_stack(rt_se);
+ 
+ 	for_each_sched_rt_entity(rt_se) {
+ 		struct rt_rq *rt_rq = group_rt_rq(rt_se);
+ 
+ 		if (rt_rq && rt_rq->rt_nr_running)
+ 			__enqueue_rt_entity(rt_se, false);
+ 	}
+ }
+ 
+ /*
+  * SCE> struct sched_class entry:
+  * DOC: Called when a task enters a runnable state.
+  * It puts the scheduling entity (task) into the red-black tree and
+  * increments the nr_running variable.
+  *
+  * (Note: above RBT comment is for just CFS)
+  *   --jyp
+  */
+ /*
+  * Adding/removing a task to/from a priority array:
+  */
+ static void
+ enqueue_task_rt(struct rq *rq, struct task_struct *p, int flags)
+ {
+ 	struct sched_rt_entity *rt_se = &p->rt;
+ 
+ 	if (flags & ENQUEUE_WAKEUP)
+ 		rt_se->timeout = 0;
+ 
+ 	enqueue_rt_entity(rt_se, flags & ENQUEUE_HEAD);
+ 
+ 	if (!task_current(rq, p) && p->nr_cpus_allowed > 1)
+ 		enqueue_pushable_task(rq, p);
+ 
+ 	inc_nr_running(rq);
+ }
+ 
+ /* 
+  * SCE> struct sched_class entry:
+  * DOC: When a task is no longer runnable, this function is called to
+  * keep the corresponding scheduling entity out of the red-black tree.
+  * It decrements the nr_running variable.
+  *   --jyp
+  */
+ static void dequeue_task_rt(struct rq *rq, struct task_struct *p, int flags)
+ {
+ 	struct sched_rt_entity *rt_se = &p->rt;
+ 
+ 	update_curr_rt(rq);
+ 	dequeue_rt_entity(rt_se);
+ 
+ 	dequeue_pushable_task(rq, p);
+ 
+ 	dec_nr_running(rq);
+ }
+ 
+ /*
+  * Put task to the head or the end of the run list without the overhead of
+  * dequeue followed by enqueue.
+  *
+  * (
+  */
+ static void
+ requeue_rt_entity(struct rt_rq *rt_rq, struct sched_rt_entity *rt_se, int head)
+ {
+ 	if (on_rt_rq(rt_se)) {
+ 		struct rt_prio_array *array = &rt_rq->active;
+ 		struct list_head *queue = array->queue + rt_se_prio(rt_se);
+ 
+ 		if (head)
+ 			list_move(&rt_se->run_list, queue);
+ 		else
+ 			list_move_tail(&rt_se->run_list, queue);
+ 	}
+ }
+ 
+ /*
+  * Main worker func for SCE yield_task_rt():  --jyp
+  */
+ static void requeue_task_rt(struct rq *rq, struct task_struct *p, int head)
+ {
+ 	struct sched_rt_entity *rt_se = &p->rt;
+ 	struct rt_rq *rt_rq;
+ 
+ 	for_each_sched_rt_entity(rt_se) {
+ 		rt_rq = rt_rq_of_se(rt_se);
+ 		requeue_rt_entity(rt_rq, rt_se, head);
+ 	}
+ }
+ 
+ /* 
+  * SCE> struct sched_class entry:
+  * DOC: This function is basically just a dequeue followed by an enqueue,
+  * unless the compat_yield sysctl is turned on; in that case, it places
+  * the scheduling entity at the right-most end of the red-black tree.
+  *   --jyp
+  */
+ static void yield_task_rt(struct rq *rq)
+ {
+ 	requeue_task_rt(rq, rq->curr, 0);
+ }
+ 
+ /*
+  * SCE> struct sched_class entry:
+  * DOC: This function checks if a task that entered the runnable state should
+  * preempt the currently running task.
+  *   --jyp
+  */
+ /*
+  * Preempt the current task with a newly woken task if needed:
+  */
+ static void check_preempt_curr_rt(struct rq *rq, struct task_struct *p, int flags)
+ {
+ 	if (p->prio < rq->curr->prio) {
+ 		resched_task(rq->curr);
+ 		return;
+ 	}
+ }
+ 
+ static struct sched_rt_entity *pick_next_rt_entity(struct rq *rq,
+ 						   struct rt_rq *rt_rq)
+ {
+ 	struct rt_prio_array *array = &rt_rq->active;
+ 	struct sched_rt_entity *next = NULL;
+ 	struct list_head *queue;
+ 	int idx;
+ 
+ 	idx = sched_find_first_bit(array->bitmap);
+ 	BUG_ON(idx >= MAX_RT_PRIO);
+ 
+ 	queue = array->queue + idx;
+ 	next = list_entry(queue->next, struct sched_rt_entity, run_list);
+ 
+ 	return next;
+ }
+ 
+ /*
+  * [421]
+  * might need to pick the next task here, which will be the one with the
+  * shortest predicted time? 
+  */
+ static struct task_struct *_pick_next_task_rt(struct rq *rq)
+ {
+ 	struct sched_rt_entity *rt_se;
+ 	struct task_struct *p;
+ 	struct rt_rq *rt_rq;
+ 
+ 	rt_rq = &rq->rt;
+ 
+ 	if (!rt_rq->rt_nr_running)
+ 		return NULL;
+ 
+ 	if (rt_rq_throttled(rt_rq))
+ 		return NULL;
+ 
+ 	do {
+ 		rt_se = pick_next_rt_entity(rq, rt_rq);
+ 		BUG_ON(!rt_se);
+ 		rt_rq = group_rt_rq(rt_se);
+ 	} while (rt_rq);
+ 
+ 	p = rt_task_of(rt_se);
+ 	p->se.exec_start = rq->clock_task;
+ 
+ 	return p;
+ }
+ 
+ /* 
+  * SCE> struct sched_class entry:
+  * DOC: This function chooses the most appropriate task eligible to run next.
+  *   --jyp
+  */
+ static struct task_struct *pick_next_task_rt(struct rq *rq)
+ {
+ 	struct task_struct *p = _pick_next_task_rt(rq);
+ 
+ 	/* The running task is never eligible for pushing */
+ 	if (p)
+ 		dequeue_pushable_task(rq, p);
+ 	return p;
+ }
+ 
+ /*
+  * [421]
+  * won't need to change anything below here I think
+  */
+ 
+ /* 
+  * SCE> struct sched_class entry:
+  * Comment fm CFS equiv:  --jyp
+  * Account for a descheduled task:
+  */
+ static void put_prev_task_rt(struct rq *rq, struct task_struct *p)
+ {
+ 	update_curr_rt(rq);
+ 
+ 	/*
+ 	 * The previous task needs to be made eligible for pushing
+ 	 * if it is still active
+ 	 */
+ 	if (on_rt_rq(&p->rt) && p->nr_cpus_allowed > 1)
+ 		enqueue_pushable_task(rq, p);
+ }
+ 
+ /*
+  * SCE> struct sched_class entry:  --jyp
+  * When switching a task to RT, we may overload the runqueue
+  * with RT tasks. In this case we try to push them off to
+  * other runqueues.
+  */
+ static void switched_to_rt(struct rq *rq, struct task_struct *p)
+ {
+ 	int check_resched = 1;
+ 
+ 	/*
+ 	 * If we are already running, then there's nothing
+ 	 * that needs to be done. But if we are not running
+ 	 * we may need to preempt the current running task.
+ 	 * If that current running task is also an RT task
+ 	 * then see if we can move to another run queue.
+ 	 */
+ 	if (p->on_rq && rq->curr != p) {
+ 		if (check_resched && p->prio < rq->curr->prio)
+ 			resched_task(rq->curr);
+ 	}
+ }
+ 
+ /*
+  * SCE> struct sched_class entry:  --jyp
+  * Priority of the task has changed. This may cause
+  * us to initiate a push or pull.
+  */
+ static void
+ prio_changed_rt(struct rq *rq, struct task_struct *p, int oldprio)
+ {
+ 	if (!p->on_rq)
+ 		return;
+ 
+ 	if (rq->curr == p) {
+ 		/* For UP simply resched on drop of prio */
+ 		if (oldprio < p->prio)
+ 			resched_task(p);
+ 	} else {
+ 		/*
+ 		 * This task is not running, but if it is
+ 		 * greater than the current running task
+ 		 * then reschedule.
+ 		 */
+ 		if (p->prio < rq->curr->prio)
+ 			resched_task(rq->curr);
+ 	}
+ }
+ 
+ static void watchdog(struct rq *rq, struct task_struct *p)
+ {
+ 	unsigned long soft, hard;
+ 
+ 	/* max may change after cur was read, this will be fixed next tick */
+ 	soft = task_rlimit(p, RLIMIT_RTTIME);
+ 	hard = task_rlimit_max(p, RLIMIT_RTTIME);
+ 
+ 	if (soft != RLIM_INFINITY) {
+ 		unsigned long next;
+ 
+ 		if (p->rt.watchdog_stamp != jiffies) {
+ 			p->rt.timeout++;
+ 			p->rt.watchdog_stamp = jiffies;
+ 		}
+ 
+ 		next = DIV_ROUND_UP(min(soft, hard), USEC_PER_SEC/HZ);
+ 		if (p->rt.timeout > next)
+ 			p->cputime_expires.sched_exp = p->se.sum_exec_runtime;
+ 	}
+ }
+ 
+ /* 
+  * SCE> struct sched_class entry:
+  * DOC: This function is mostly called from time tick functions; it might
+  * lead to process switch.  This drives the running preemption.
+  *   --jyp
+  */
+ static void task_tick_rt(struct rq *rq, struct task_struct *p, int queued)
+ {
+ 	struct sched_rt_entity *rt_se = &p->rt;
+ 
+ 	update_curr_rt(rq);
+ 
+ 	watchdog(rq, p);
+ 
+ 	/*
+ 	 * RR tasks need a special form of timeslice management.
+ 	 * FIFO tasks have no timeslices.
+ 	 */
+ 	if (p->policy != SCHED_RR)
+ 		return;
+ 
+ 	if (--p->rt.time_slice)
+ 		return;
+ 
+ 	p->rt.time_slice = sched_rr_timeslice;
+ 
+ 	/*
+ 	 * Requeue to the end of queue if we (and all of our ancestors) are the
+ 	 * only element on the queue
+ 	 */
+ 	for_each_sched_rt_entity(rt_se) {
+ 		if (rt_se->run_list.prev != rt_se->run_list.next) {
+ 			requeue_task_rt(rq, p, 0);
+ 			set_tsk_need_resched(p);
+ 			return;
+ 		}
+ 	}
+ }
+ 
+ /* 
+  * SCE> struct sched_class entry:
+  * DOC: This function is called when a task changes its scheduling class or
+  * changes its task group.
+  *   --jyp
+  */
+ static void set_curr_task_rt(struct rq *rq)
+ {
+ 	struct task_struct *p = rq->curr;
+ 
+ 	p->se.exec_start = rq->clock_task;
+ 
+ 	/* The running task is never eligible for pushing */
+ 	dequeue_pushable_task(rq, p);
+ }
+ 
+ /* 
+  * SCE> struct sched_class entry:
+  * For SCHED_RR tasks, returns the timeslice for scheduling  --jyp
+  */
+ static unsigned int get_rr_interval_rt(struct rq *rq, struct task_struct *task)
+ {
+ 	/*
+ 	 * Time slice is 0 for SCHED_FIFO tasks
+ 	 */
+ 	if (task->policy == SCHED_RR)
+ 		return sched_rr_timeslice;
+ 	else
+ 		return 0;
+ }
+ 
+ 
+ 
+ const struct sched_class rt_sched_class = {
+ 	.next			= &fair_sched_class,
+ 	.enqueue_task		= enqueue_task_rt,
+ 	.dequeue_task		= dequeue_task_rt,
+ 	.yield_task		= yield_task_rt,
+ 
+ 	.check_preempt_curr	= check_preempt_curr_rt,
+ 
+ 	.pick_next_task		= pick_next_task_rt,
+ 	.put_prev_task		= put_prev_task_rt,
+ 	.set_curr_task          = set_curr_task_rt,
+ 	.task_tick		= task_tick_rt,
+ 
+ 	.get_rr_interval	= get_rr_interval_rt,
+ 
+ 	.prio_changed		= prio_changed_rt,
+ 	.switched_to		= switched_to_rt,
+ };
+ 
+ #ifdef CONFIG_SCHED_DEBUG
+ extern void print_rt_rq(struct seq_file *m, int cpu, struct rt_rq *rt_rq);
+ 
+ void print_rt_stats(struct seq_file *m, int cpu)
+ {
+ 	rt_rq_iter_t iter;
+ 	struct rt_rq *rt_rq;
+ 
+ 	rcu_read_lock();
+ 	for_each_rt_rq(rt_rq, iter, cpu_rq(cpu))
+ 		print_rt_rq(m, cpu, rt_rq);
+ 	rcu_read_unlock();
+ }
+ #endif /* CONFIG_SCHED_DEBUG */
diff -rcP -X ignorelist.txt linux-3.10.10/kernel/sched/rt-supp.h project2/kernel/sched/rt-supp.h
*** linux-3.10.10/kernel/sched/rt-supp.h	1969-12-31 19:00:00.000000000 -0500
--- project2/kernel/sched/rt-supp.h	2013-11-30 17:29:58.847696730 -0500
***************
*** 0 ****
--- 1,182 ----
+ #ifdef CONFIG_RT_GROUP_SCHED
+   100+ lines
+ #else /* CONFIG_RT_GROUP_SCHED */
+ 
+ #define rt_entity_is_task(rt_se) (1)
+ 
+ static inline struct task_struct *rt_task_of(struct sched_rt_entity *rt_se)
+ {
+ 	return container_of(rt_se, struct task_struct, rt);
+ }
+ 
+ static inline struct rq *rq_of_rt_rq(struct rt_rq *rt_rq)
+ {
+ 	return container_of(rt_rq, struct rq, rt);
+ }
+ 
+ static inline struct rt_rq *rt_rq_of_se(struct sched_rt_entity *rt_se)
+ {
+ 	struct task_struct *p = rt_task_of(rt_se);
+ 	struct rq *rq = task_rq(p);
+ 
+ 	return &rq->rt;
+ }
+ 
+ void free_rt_sched_group(struct task_group *tg) { }
+ 
+ int alloc_rt_sched_group(struct task_group *tg, struct task_group *parent)
+ {
+ 	return 1;
+ }
+ #endif /* CONFIG_RT_GROUP_SCHED */
+ 
+ #ifdef CONFIG_SMP
+   100+ lines
+ #else
+ 
+ static inline void enqueue_pushable_task(struct rq *rq, struct task_struct *p)
+ {
+ }
+ 
+ static inline void dequeue_pushable_task(struct rq *rq, struct task_struct *p)
+ {
+ }
+ 
+ static inline
+ void inc_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)
+ {
+ }
+ 
+ static inline
+ void dec_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)
+ {
+ }
+ 
+ #endif /* CONFIG_SMP */
+ 
+ #ifdef CONFIG_RT_GROUP_SCHED
+   200+ lines
+ #else /* !CONFIG_RT_GROUP_SCHED */
+ 
+ static inline u64 sched_rt_runtime(struct rt_rq *rt_rq)
+ {
+ 	return rt_rq->rt_runtime;
+ }
+ 
+ static inline u64 sched_rt_period(struct rt_rq *rt_rq)
+ {
+ 	return ktime_to_ns(def_rt_bandwidth.rt_period);
+ }
+ 
+ typedef struct rt_rq *rt_rq_iter_t;
+ 
+ #define for_each_rt_rq(rt_rq, iter, rq) \
+ 	for ((void) iter, rt_rq = &rq->rt; rt_rq; rt_rq = NULL)
+ 
+ static inline void list_add_leaf_rt_rq(struct rt_rq *rt_rq)
+ {
+ }
+ 
+ static inline void list_del_leaf_rt_rq(struct rt_rq *rt_rq)
+ {
+ }
+ 
+ #define for_each_leaf_rt_rq(rt_rq, rq) \
+ 	for (rt_rq = &rq->rt; rt_rq; rt_rq = NULL)
+ 
+ #define for_each_sched_rt_entity(rt_se) \
+ 	for (; rt_se; rt_se = NULL)
+ 
+ static inline struct rt_rq *group_rt_rq(struct sched_rt_entity *rt_se)
+ {
+ 	return NULL;
+ }
+ 
+ static inline void sched_rt_rq_enqueue(struct rt_rq *rt_rq)
+ {
+ 	if (rt_rq->rt_nr_running)
+ 		resched_task(rq_of_rt_rq(rt_rq)->curr);
+ }
+ 
+ static inline void sched_rt_rq_dequeue(struct rt_rq *rt_rq)
+ {
+ }
+ 
+ static inline int rt_rq_throttled(struct rt_rq *rt_rq)
+ {
+ 	return rt_rq->rt_throttled;
+ }
+ 
+ static inline const struct cpumask *sched_rt_period_mask(void)
+ {
+ 	return cpu_online_mask;
+ }
+ 
+ static inline
+ struct rt_rq *sched_rt_period_rt_rq(struct rt_bandwidth *rt_b, int cpu)
+ {
+ 	return &cpu_rq(cpu)->rt;
+ }
+ 
+ static inline struct rt_bandwidth *sched_rt_bandwidth(struct rt_rq *rt_rq)
+ {
+ 	return &def_rt_bandwidth;
+ }
+ 
+ #endif /* CONFIG_RT_GROUP_SCHED */
+ 
+ #ifdef CONFIG_SMP
+   200+ lines
+ #else /* !CONFIG_SMP */
+ static inline int balance_runtime(struct rt_rq *rt_rq)
+ {
+ 	return 0;
+ }
+ #endif /* CONFIG_SMP */
+ 
+ static inline int rt_se_prio(struct sched_rt_entity *rt_se)
+ {
+ #ifdef CONFIG_RT_GROUP_SCHED
+ 	struct rt_rq *rt_rq = group_rt_rq(rt_se);
+ 
+ 	if (rt_rq)
+ 		return rt_rq->highest_prio.curr;
+ #endif
+ 
+ 	return rt_task_of(rt_se)->prio;
+ }
+ 
+ #if defined CONFIG_SMP
+   ~20 lines
+ #else /* CONFIG_SMP */
+ 
+ static inline
+ void inc_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio) {}
+ static inline
+ void dec_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio) {}
+ 
+ #endif /* CONFIG_SMP */
+ 
+ #if defined CONFIG_SMP || defined CONFIG_RT_GROUP_SCHED
+   ~40 lines
+ #else
+ 
+ static inline void inc_rt_prio(struct rt_rq *rt_rq, int prio) {}
+ static inline void dec_rt_prio(struct rt_rq *rt_rq, int prio) {}
+ 
+ #endif /* CONFIG_SMP || CONFIG_RT_GROUP_SCHED */
+ 
+ #ifdef CONFIG_RT_GROUP_SCHED
+   ~20 lines
+ #else /* CONFIG_RT_GROUP_SCHED */
+ 
+ static void
+ inc_rt_group(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)
+ {
+ 	start_rt_bandwidth(&def_rt_bandwidth);
+ }
+ 
+ static inline
+ void dec_rt_group(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq) {}
+ 
+ #endif /* CONFIG_RT_GROUP_SCHED */
diff -rcP -X ignorelist.txt linux-3.10.10/Makefile project2/Makefile
*** linux-3.10.10/Makefile	2013-08-29 12:47:51.000000000 -0400
--- project2/Makefile	2013-11-30 16:57:16.081692749 -0500
***************
*** 1,7 ****
  VERSION = 3
  PATCHLEVEL = 10
  SUBLEVEL = 10
! EXTRAVERSION =
  NAME = TOSSUG Baby Fish
  
  # *DOCUMENTATION*
--- 1,7 ----
  VERSION = 3
  PATCHLEVEL = 10
  SUBLEVEL = 10
! EXTRAVERSION = -psjf-scheduler
  NAME = TOSSUG Baby Fish
  
  # *DOCUMENTATION*
